import toolset ;
import feature ;

feature.feature build-tool : : free ;

exe commands_to_compilation_database_cpp
   : # sources

      commands_to_compilation_database_cpp.cpp

      compilation_database.hpp
      json.hpp

   : # requirements

      <linkflags>-lboost_program_options
      <linkflags>-lboost_filesystem
      <linkflags>-lboost_system

      <toolset>clang:<cxxflags>"-std=c++11 -stdlib=libc++"
      <toolset>gcc:<cxxflags>-std=c++11
      <toolset>darwin:<cxxflags>-std=c++11

   ;

alias test
   : # sources
      commands-to-compilation-database-compare-py.pass
      commands-to-compilation-database-compare-cpp.pass
   ;

# generate targets for each implementation
for implementation in py cpp
{
   for build-tool in Boost.Build
   {
      explicit commands_to_compilation_database_$(build-tool)_$(implementation).json ;
      make commands_to_compilation_database_$(build-tool)_$(implementation).json
         : # sources
            commands_to_compilation_database_$(implementation)
         : # generating-rule
            @commands-to-compilation-database
         : # requirements
            <build-tool>$(build-tool)
         ;

      explicit commands-to-compilation-database-compare-$(implementation).pass ;
      make commands-to-compilation-database-compare-$(implementation).pass
         : # sources
            test/commands_to_compilation_database_$(build-tool).json
            commands_to_compilation_database_$(build-tool)_$(implementation).json
         : # generating-rule
            @compare
         ;
   }
}

toolset.flags commands-to-compilation-database BUILD_TOOL : <build-tool> ;
toolset.flags commands-to-compilation-database FLAGS : <flags> ;

actions commands-to-compilation-database
{
   ./$(>) $(FLAGS) --build-tool=$(BUILD_TOOL) --output-filename=$(<) < test/commands_to_compilation_database_$(BUILD_TOOL).txt
}

actions compare
{
   if diff -w "$(>[1])" "$(>[2])" ; then echo "**passed**" > $(<) ; fi
}
